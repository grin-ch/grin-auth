// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldRegTime holds the string denoting the reg_time field in the database.
	FieldRegTime = "reg_time"
	// EdgeUserData holds the string denoting the user_data edge name in mutations.
	EdgeUserData = "user_data"
	// EdgeLoginLogs holds the string denoting the login_logs edge name in mutations.
	EdgeLoginLogs = "login_logs"
	// Table holds the table name of the user in the database.
	Table = "users"
	// UserDataTable is the table that holds the user_data relation/edge.
	UserDataTable = "user_data"
	// UserDataInverseTable is the table name for the UserData entity.
	// It exists in this package in order to avoid circular dependency with the "userdata" package.
	UserDataInverseTable = "user_data"
	// UserDataColumn is the table column denoting the user_data relation/edge.
	UserDataColumn = "user_user_data"
	// LoginLogsTable is the table that holds the login_logs relation/edge.
	LoginLogsTable = "login_logs"
	// LoginLogsInverseTable is the table name for the LoginLog entity.
	// It exists in this package in order to avoid circular dependency with the "loginlog" package.
	LoginLogsInverseTable = "login_logs"
	// LoginLogsColumn is the table column denoting the login_logs relation/edge.
	LoginLogsColumn = "user_login_logs"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldEmail,
	FieldPhone,
	FieldPassword,
	FieldRegTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// DefaultRegTime holds the default value on creation for the "reg_time" field.
	DefaultRegTime func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)
