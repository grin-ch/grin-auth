// Code generated by ent, DO NOT EDIT.

package model

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/grin-ch/grin-auth/pkg/model/predicate"
	"github.com/grin-ch/grin-auth/pkg/model/userdata"
)

// UserDataDelete is the builder for deleting a UserData entity.
type UserDataDelete struct {
	config
	hooks    []Hook
	mutation *UserDataMutation
}

// Where appends a list predicates to the UserDataDelete builder.
func (udd *UserDataDelete) Where(ps ...predicate.UserData) *UserDataDelete {
	udd.mutation.Where(ps...)
	return udd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (udd *UserDataDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, UserDataMutation](ctx, udd.sqlExec, udd.mutation, udd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (udd *UserDataDelete) ExecX(ctx context.Context) int {
	n, err := udd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (udd *UserDataDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: userdata.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userdata.FieldID,
			},
		},
	}
	if ps := udd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, udd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	udd.mutation.done = true
	return affected, err
}

// UserDataDeleteOne is the builder for deleting a single UserData entity.
type UserDataDeleteOne struct {
	udd *UserDataDelete
}

// Where appends a list predicates to the UserDataDelete builder.
func (uddo *UserDataDeleteOne) Where(ps ...predicate.UserData) *UserDataDeleteOne {
	uddo.udd.mutation.Where(ps...)
	return uddo
}

// Exec executes the deletion query.
func (uddo *UserDataDeleteOne) Exec(ctx context.Context) error {
	n, err := uddo.udd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{userdata.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (uddo *UserDataDeleteOne) ExecX(ctx context.Context) {
	if err := uddo.Exec(ctx); err != nil {
		panic(err)
	}
}
