// Code generated by ent, DO NOT EDIT.

package userdata

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the userdata type in the database.
	Label = "user_data"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNickname holds the string denoting the nickname field in the database.
	FieldNickname = "nickname"
	// FieldAvatarURL holds the string denoting the avatar_url field in the database.
	FieldAvatarURL = "avatar_url"
	// FieldBirthday holds the string denoting the birthday field in the database.
	FieldBirthday = "birthday"
	// FieldSex holds the string denoting the sex field in the database.
	FieldSex = "sex"
	// FieldLevelExp holds the string denoting the level_exp field in the database.
	FieldLevelExp = "level_exp"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the userdata in the database.
	Table = "user_data"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_data"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_user_data"
)

// Columns holds all SQL columns for userdata fields.
var Columns = []string{
	FieldID,
	FieldNickname,
	FieldAvatarURL,
	FieldBirthday,
	FieldSex,
	FieldLevelExp,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "user_data"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_user_data",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NicknameValidator is a validator for the "nickname" field. It is called by the builders before save.
	NicknameValidator func(string) error
	// DefaultAvatarURL holds the default value on creation for the "avatar_url" field.
	DefaultAvatarURL string
	// DefaultBirthday holds the default value on creation for the "birthday" field.
	DefaultBirthday func() time.Time
	// DefaultLevelExp holds the default value on creation for the "level_exp" field.
	DefaultLevelExp int
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// Sex defines the type for the "sex" enum field.
type Sex string

// SexUnKnowSex is the default value of the Sex enum.
const DefaultSex = SexUnKnowSex

// Sex values.
const (
	SexUnKnowSex Sex = "UnKnowSex"
	SexMale      Sex = "Male"
	SexFemale    Sex = "Female"
)

func (s Sex) String() string {
	return string(s)
}

// SexValidator is a validator for the "sex" field enum values. It is called by the builders before save.
func SexValidator(s Sex) error {
	switch s {
	case SexUnKnowSex, SexMale, SexFemale:
		return nil
	default:
		return fmt.Errorf("userdata: invalid enum value for sex field: %q", s)
	}
}
