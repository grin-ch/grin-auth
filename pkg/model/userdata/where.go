// Code generated by ent, DO NOT EDIT.

package userdata

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/grin-ch/grin-auth/pkg/model/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserData {
	return predicate.UserData(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserData {
	return predicate.UserData(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserData {
	return predicate.UserData(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserData {
	return predicate.UserData(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserData {
	return predicate.UserData(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserData {
	return predicate.UserData(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserData {
	return predicate.UserData(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserData {
	return predicate.UserData(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserData {
	return predicate.UserData(sql.FieldLTE(FieldID, id))
}

// Nickname applies equality check predicate on the "nickname" field. It's identical to NicknameEQ.
func Nickname(v string) predicate.UserData {
	return predicate.UserData(sql.FieldEQ(FieldNickname, v))
}

// AvatarURL applies equality check predicate on the "avatar_url" field. It's identical to AvatarURLEQ.
func AvatarURL(v string) predicate.UserData {
	return predicate.UserData(sql.FieldEQ(FieldAvatarURL, v))
}

// Birthday applies equality check predicate on the "birthday" field. It's identical to BirthdayEQ.
func Birthday(v time.Time) predicate.UserData {
	return predicate.UserData(sql.FieldEQ(FieldBirthday, v))
}

// LevelExp applies equality check predicate on the "level_exp" field. It's identical to LevelExpEQ.
func LevelExp(v int) predicate.UserData {
	return predicate.UserData(sql.FieldEQ(FieldLevelExp, v))
}

// NicknameEQ applies the EQ predicate on the "nickname" field.
func NicknameEQ(v string) predicate.UserData {
	return predicate.UserData(sql.FieldEQ(FieldNickname, v))
}

// NicknameNEQ applies the NEQ predicate on the "nickname" field.
func NicknameNEQ(v string) predicate.UserData {
	return predicate.UserData(sql.FieldNEQ(FieldNickname, v))
}

// NicknameIn applies the In predicate on the "nickname" field.
func NicknameIn(vs ...string) predicate.UserData {
	return predicate.UserData(sql.FieldIn(FieldNickname, vs...))
}

// NicknameNotIn applies the NotIn predicate on the "nickname" field.
func NicknameNotIn(vs ...string) predicate.UserData {
	return predicate.UserData(sql.FieldNotIn(FieldNickname, vs...))
}

// NicknameGT applies the GT predicate on the "nickname" field.
func NicknameGT(v string) predicate.UserData {
	return predicate.UserData(sql.FieldGT(FieldNickname, v))
}

// NicknameGTE applies the GTE predicate on the "nickname" field.
func NicknameGTE(v string) predicate.UserData {
	return predicate.UserData(sql.FieldGTE(FieldNickname, v))
}

// NicknameLT applies the LT predicate on the "nickname" field.
func NicknameLT(v string) predicate.UserData {
	return predicate.UserData(sql.FieldLT(FieldNickname, v))
}

// NicknameLTE applies the LTE predicate on the "nickname" field.
func NicknameLTE(v string) predicate.UserData {
	return predicate.UserData(sql.FieldLTE(FieldNickname, v))
}

// NicknameContains applies the Contains predicate on the "nickname" field.
func NicknameContains(v string) predicate.UserData {
	return predicate.UserData(sql.FieldContains(FieldNickname, v))
}

// NicknameHasPrefix applies the HasPrefix predicate on the "nickname" field.
func NicknameHasPrefix(v string) predicate.UserData {
	return predicate.UserData(sql.FieldHasPrefix(FieldNickname, v))
}

// NicknameHasSuffix applies the HasSuffix predicate on the "nickname" field.
func NicknameHasSuffix(v string) predicate.UserData {
	return predicate.UserData(sql.FieldHasSuffix(FieldNickname, v))
}

// NicknameEqualFold applies the EqualFold predicate on the "nickname" field.
func NicknameEqualFold(v string) predicate.UserData {
	return predicate.UserData(sql.FieldEqualFold(FieldNickname, v))
}

// NicknameContainsFold applies the ContainsFold predicate on the "nickname" field.
func NicknameContainsFold(v string) predicate.UserData {
	return predicate.UserData(sql.FieldContainsFold(FieldNickname, v))
}

// AvatarURLEQ applies the EQ predicate on the "avatar_url" field.
func AvatarURLEQ(v string) predicate.UserData {
	return predicate.UserData(sql.FieldEQ(FieldAvatarURL, v))
}

// AvatarURLNEQ applies the NEQ predicate on the "avatar_url" field.
func AvatarURLNEQ(v string) predicate.UserData {
	return predicate.UserData(sql.FieldNEQ(FieldAvatarURL, v))
}

// AvatarURLIn applies the In predicate on the "avatar_url" field.
func AvatarURLIn(vs ...string) predicate.UserData {
	return predicate.UserData(sql.FieldIn(FieldAvatarURL, vs...))
}

// AvatarURLNotIn applies the NotIn predicate on the "avatar_url" field.
func AvatarURLNotIn(vs ...string) predicate.UserData {
	return predicate.UserData(sql.FieldNotIn(FieldAvatarURL, vs...))
}

// AvatarURLGT applies the GT predicate on the "avatar_url" field.
func AvatarURLGT(v string) predicate.UserData {
	return predicate.UserData(sql.FieldGT(FieldAvatarURL, v))
}

// AvatarURLGTE applies the GTE predicate on the "avatar_url" field.
func AvatarURLGTE(v string) predicate.UserData {
	return predicate.UserData(sql.FieldGTE(FieldAvatarURL, v))
}

// AvatarURLLT applies the LT predicate on the "avatar_url" field.
func AvatarURLLT(v string) predicate.UserData {
	return predicate.UserData(sql.FieldLT(FieldAvatarURL, v))
}

// AvatarURLLTE applies the LTE predicate on the "avatar_url" field.
func AvatarURLLTE(v string) predicate.UserData {
	return predicate.UserData(sql.FieldLTE(FieldAvatarURL, v))
}

// AvatarURLContains applies the Contains predicate on the "avatar_url" field.
func AvatarURLContains(v string) predicate.UserData {
	return predicate.UserData(sql.FieldContains(FieldAvatarURL, v))
}

// AvatarURLHasPrefix applies the HasPrefix predicate on the "avatar_url" field.
func AvatarURLHasPrefix(v string) predicate.UserData {
	return predicate.UserData(sql.FieldHasPrefix(FieldAvatarURL, v))
}

// AvatarURLHasSuffix applies the HasSuffix predicate on the "avatar_url" field.
func AvatarURLHasSuffix(v string) predicate.UserData {
	return predicate.UserData(sql.FieldHasSuffix(FieldAvatarURL, v))
}

// AvatarURLEqualFold applies the EqualFold predicate on the "avatar_url" field.
func AvatarURLEqualFold(v string) predicate.UserData {
	return predicate.UserData(sql.FieldEqualFold(FieldAvatarURL, v))
}

// AvatarURLContainsFold applies the ContainsFold predicate on the "avatar_url" field.
func AvatarURLContainsFold(v string) predicate.UserData {
	return predicate.UserData(sql.FieldContainsFold(FieldAvatarURL, v))
}

// BirthdayEQ applies the EQ predicate on the "birthday" field.
func BirthdayEQ(v time.Time) predicate.UserData {
	return predicate.UserData(sql.FieldEQ(FieldBirthday, v))
}

// BirthdayNEQ applies the NEQ predicate on the "birthday" field.
func BirthdayNEQ(v time.Time) predicate.UserData {
	return predicate.UserData(sql.FieldNEQ(FieldBirthday, v))
}

// BirthdayIn applies the In predicate on the "birthday" field.
func BirthdayIn(vs ...time.Time) predicate.UserData {
	return predicate.UserData(sql.FieldIn(FieldBirthday, vs...))
}

// BirthdayNotIn applies the NotIn predicate on the "birthday" field.
func BirthdayNotIn(vs ...time.Time) predicate.UserData {
	return predicate.UserData(sql.FieldNotIn(FieldBirthday, vs...))
}

// BirthdayGT applies the GT predicate on the "birthday" field.
func BirthdayGT(v time.Time) predicate.UserData {
	return predicate.UserData(sql.FieldGT(FieldBirthday, v))
}

// BirthdayGTE applies the GTE predicate on the "birthday" field.
func BirthdayGTE(v time.Time) predicate.UserData {
	return predicate.UserData(sql.FieldGTE(FieldBirthday, v))
}

// BirthdayLT applies the LT predicate on the "birthday" field.
func BirthdayLT(v time.Time) predicate.UserData {
	return predicate.UserData(sql.FieldLT(FieldBirthday, v))
}

// BirthdayLTE applies the LTE predicate on the "birthday" field.
func BirthdayLTE(v time.Time) predicate.UserData {
	return predicate.UserData(sql.FieldLTE(FieldBirthday, v))
}

// SexEQ applies the EQ predicate on the "sex" field.
func SexEQ(v Sex) predicate.UserData {
	return predicate.UserData(sql.FieldEQ(FieldSex, v))
}

// SexNEQ applies the NEQ predicate on the "sex" field.
func SexNEQ(v Sex) predicate.UserData {
	return predicate.UserData(sql.FieldNEQ(FieldSex, v))
}

// SexIn applies the In predicate on the "sex" field.
func SexIn(vs ...Sex) predicate.UserData {
	return predicate.UserData(sql.FieldIn(FieldSex, vs...))
}

// SexNotIn applies the NotIn predicate on the "sex" field.
func SexNotIn(vs ...Sex) predicate.UserData {
	return predicate.UserData(sql.FieldNotIn(FieldSex, vs...))
}

// LevelExpEQ applies the EQ predicate on the "level_exp" field.
func LevelExpEQ(v int) predicate.UserData {
	return predicate.UserData(sql.FieldEQ(FieldLevelExp, v))
}

// LevelExpNEQ applies the NEQ predicate on the "level_exp" field.
func LevelExpNEQ(v int) predicate.UserData {
	return predicate.UserData(sql.FieldNEQ(FieldLevelExp, v))
}

// LevelExpIn applies the In predicate on the "level_exp" field.
func LevelExpIn(vs ...int) predicate.UserData {
	return predicate.UserData(sql.FieldIn(FieldLevelExp, vs...))
}

// LevelExpNotIn applies the NotIn predicate on the "level_exp" field.
func LevelExpNotIn(vs ...int) predicate.UserData {
	return predicate.UserData(sql.FieldNotIn(FieldLevelExp, vs...))
}

// LevelExpGT applies the GT predicate on the "level_exp" field.
func LevelExpGT(v int) predicate.UserData {
	return predicate.UserData(sql.FieldGT(FieldLevelExp, v))
}

// LevelExpGTE applies the GTE predicate on the "level_exp" field.
func LevelExpGTE(v int) predicate.UserData {
	return predicate.UserData(sql.FieldGTE(FieldLevelExp, v))
}

// LevelExpLT applies the LT predicate on the "level_exp" field.
func LevelExpLT(v int) predicate.UserData {
	return predicate.UserData(sql.FieldLT(FieldLevelExp, v))
}

// LevelExpLTE applies the LTE predicate on the "level_exp" field.
func LevelExpLTE(v int) predicate.UserData {
	return predicate.UserData(sql.FieldLTE(FieldLevelExp, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserData {
	return predicate.UserData(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserData {
	return predicate.UserData(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserData) predicate.UserData {
	return predicate.UserData(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserData) predicate.UserData {
	return predicate.UserData(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserData) predicate.UserData {
	return predicate.UserData(func(s *sql.Selector) {
		p(s.Not())
	})
}
