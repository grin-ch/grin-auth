// Code generated by ent, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/grin-ch/grin-auth/pkg/model/user"
	"github.com/grin-ch/grin-auth/pkg/model/userdata"
)

// UserDataCreate is the builder for creating a UserData entity.
type UserDataCreate struct {
	config
	mutation *UserDataMutation
	hooks    []Hook
}

// SetNickname sets the "nickname" field.
func (udc *UserDataCreate) SetNickname(s string) *UserDataCreate {
	udc.mutation.SetNickname(s)
	return udc
}

// SetAvatarURL sets the "avatar_url" field.
func (udc *UserDataCreate) SetAvatarURL(s string) *UserDataCreate {
	udc.mutation.SetAvatarURL(s)
	return udc
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (udc *UserDataCreate) SetNillableAvatarURL(s *string) *UserDataCreate {
	if s != nil {
		udc.SetAvatarURL(*s)
	}
	return udc
}

// SetBirthday sets the "birthday" field.
func (udc *UserDataCreate) SetBirthday(t time.Time) *UserDataCreate {
	udc.mutation.SetBirthday(t)
	return udc
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (udc *UserDataCreate) SetNillableBirthday(t *time.Time) *UserDataCreate {
	if t != nil {
		udc.SetBirthday(*t)
	}
	return udc
}

// SetSex sets the "sex" field.
func (udc *UserDataCreate) SetSex(u userdata.Sex) *UserDataCreate {
	udc.mutation.SetSex(u)
	return udc
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (udc *UserDataCreate) SetNillableSex(u *userdata.Sex) *UserDataCreate {
	if u != nil {
		udc.SetSex(*u)
	}
	return udc
}

// SetLevelExp sets the "level_exp" field.
func (udc *UserDataCreate) SetLevelExp(i int) *UserDataCreate {
	udc.mutation.SetLevelExp(i)
	return udc
}

// SetNillableLevelExp sets the "level_exp" field if the given value is not nil.
func (udc *UserDataCreate) SetNillableLevelExp(i *int) *UserDataCreate {
	if i != nil {
		udc.SetLevelExp(*i)
	}
	return udc
}

// SetID sets the "id" field.
func (udc *UserDataCreate) SetID(i int) *UserDataCreate {
	udc.mutation.SetID(i)
	return udc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (udc *UserDataCreate) SetUserID(id int) *UserDataCreate {
	udc.mutation.SetUserID(id)
	return udc
}

// SetUser sets the "user" edge to the User entity.
func (udc *UserDataCreate) SetUser(u *User) *UserDataCreate {
	return udc.SetUserID(u.ID)
}

// Mutation returns the UserDataMutation object of the builder.
func (udc *UserDataCreate) Mutation() *UserDataMutation {
	return udc.mutation
}

// Save creates the UserData in the database.
func (udc *UserDataCreate) Save(ctx context.Context) (*UserData, error) {
	udc.defaults()
	return withHooks[*UserData, UserDataMutation](ctx, udc.sqlSave, udc.mutation, udc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (udc *UserDataCreate) SaveX(ctx context.Context) *UserData {
	v, err := udc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (udc *UserDataCreate) Exec(ctx context.Context) error {
	_, err := udc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udc *UserDataCreate) ExecX(ctx context.Context) {
	if err := udc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (udc *UserDataCreate) defaults() {
	if _, ok := udc.mutation.AvatarURL(); !ok {
		v := userdata.DefaultAvatarURL
		udc.mutation.SetAvatarURL(v)
	}
	if _, ok := udc.mutation.Birthday(); !ok {
		v := userdata.DefaultBirthday()
		udc.mutation.SetBirthday(v)
	}
	if _, ok := udc.mutation.Sex(); !ok {
		v := userdata.DefaultSex
		udc.mutation.SetSex(v)
	}
	if _, ok := udc.mutation.LevelExp(); !ok {
		v := userdata.DefaultLevelExp
		udc.mutation.SetLevelExp(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (udc *UserDataCreate) check() error {
	if _, ok := udc.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New(`model: missing required field "UserData.nickname"`)}
	}
	if v, ok := udc.mutation.Nickname(); ok {
		if err := userdata.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`model: validator failed for field "UserData.nickname": %w`, err)}
		}
	}
	if _, ok := udc.mutation.AvatarURL(); !ok {
		return &ValidationError{Name: "avatar_url", err: errors.New(`model: missing required field "UserData.avatar_url"`)}
	}
	if _, ok := udc.mutation.Birthday(); !ok {
		return &ValidationError{Name: "birthday", err: errors.New(`model: missing required field "UserData.birthday"`)}
	}
	if _, ok := udc.mutation.Sex(); !ok {
		return &ValidationError{Name: "sex", err: errors.New(`model: missing required field "UserData.sex"`)}
	}
	if v, ok := udc.mutation.Sex(); ok {
		if err := userdata.SexValidator(v); err != nil {
			return &ValidationError{Name: "sex", err: fmt.Errorf(`model: validator failed for field "UserData.sex": %w`, err)}
		}
	}
	if _, ok := udc.mutation.LevelExp(); !ok {
		return &ValidationError{Name: "level_exp", err: errors.New(`model: missing required field "UserData.level_exp"`)}
	}
	if v, ok := udc.mutation.ID(); ok {
		if err := userdata.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`model: validator failed for field "UserData.id": %w`, err)}
		}
	}
	if _, ok := udc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`model: missing required edge "UserData.user"`)}
	}
	return nil
}

func (udc *UserDataCreate) sqlSave(ctx context.Context) (*UserData, error) {
	if err := udc.check(); err != nil {
		return nil, err
	}
	_node, _spec := udc.createSpec()
	if err := sqlgraph.CreateNode(ctx, udc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	udc.mutation.id = &_node.ID
	udc.mutation.done = true
	return _node, nil
}

func (udc *UserDataCreate) createSpec() (*UserData, *sqlgraph.CreateSpec) {
	var (
		_node = &UserData{config: udc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userdata.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userdata.FieldID,
			},
		}
	)
	if id, ok := udc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := udc.mutation.Nickname(); ok {
		_spec.SetField(userdata.FieldNickname, field.TypeString, value)
		_node.Nickname = value
	}
	if value, ok := udc.mutation.AvatarURL(); ok {
		_spec.SetField(userdata.FieldAvatarURL, field.TypeString, value)
		_node.AvatarURL = value
	}
	if value, ok := udc.mutation.Birthday(); ok {
		_spec.SetField(userdata.FieldBirthday, field.TypeTime, value)
		_node.Birthday = value
	}
	if value, ok := udc.mutation.Sex(); ok {
		_spec.SetField(userdata.FieldSex, field.TypeEnum, value)
		_node.Sex = value
	}
	if value, ok := udc.mutation.LevelExp(); ok {
		_spec.SetField(userdata.FieldLevelExp, field.TypeInt, value)
		_node.LevelExp = value
	}
	if nodes := udc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userdata.UserTable,
			Columns: []string{userdata.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_user_data = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserDataCreateBulk is the builder for creating many UserData entities in bulk.
type UserDataCreateBulk struct {
	config
	builders []*UserDataCreate
}

// Save creates the UserData entities in the database.
func (udcb *UserDataCreateBulk) Save(ctx context.Context) ([]*UserData, error) {
	specs := make([]*sqlgraph.CreateSpec, len(udcb.builders))
	nodes := make([]*UserData, len(udcb.builders))
	mutators := make([]Mutator, len(udcb.builders))
	for i := range udcb.builders {
		func(i int, root context.Context) {
			builder := udcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, udcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, udcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, udcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (udcb *UserDataCreateBulk) SaveX(ctx context.Context) []*UserData {
	v, err := udcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (udcb *UserDataCreateBulk) Exec(ctx context.Context) error {
	_, err := udcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udcb *UserDataCreateBulk) ExecX(ctx context.Context) {
	if err := udcb.Exec(ctx); err != nil {
		panic(err)
	}
}
