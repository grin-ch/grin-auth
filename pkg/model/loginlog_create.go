// Code generated by ent, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/grin-ch/grin-auth/pkg/model/loginlog"
	"github.com/grin-ch/grin-auth/pkg/model/user"
)

// LoginLogCreate is the builder for creating a LoginLog entity.
type LoginLogCreate struct {
	config
	mutation *LoginLogMutation
	hooks    []Hook
}

// SetIPAddr sets the "ip_addr" field.
func (llc *LoginLogCreate) SetIPAddr(s string) *LoginLogCreate {
	llc.mutation.SetIPAddr(s)
	return llc
}

// SetLoginTime sets the "login_time" field.
func (llc *LoginLogCreate) SetLoginTime(t time.Time) *LoginLogCreate {
	llc.mutation.SetLoginTime(t)
	return llc
}

// SetNillableLoginTime sets the "login_time" field if the given value is not nil.
func (llc *LoginLogCreate) SetNillableLoginTime(t *time.Time) *LoginLogCreate {
	if t != nil {
		llc.SetLoginTime(*t)
	}
	return llc
}

// SetID sets the "id" field.
func (llc *LoginLogCreate) SetID(i int) *LoginLogCreate {
	llc.mutation.SetID(i)
	return llc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (llc *LoginLogCreate) SetUserID(id int) *LoginLogCreate {
	llc.mutation.SetUserID(id)
	return llc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (llc *LoginLogCreate) SetNillableUserID(id *int) *LoginLogCreate {
	if id != nil {
		llc = llc.SetUserID(*id)
	}
	return llc
}

// SetUser sets the "user" edge to the User entity.
func (llc *LoginLogCreate) SetUser(u *User) *LoginLogCreate {
	return llc.SetUserID(u.ID)
}

// Mutation returns the LoginLogMutation object of the builder.
func (llc *LoginLogCreate) Mutation() *LoginLogMutation {
	return llc.mutation
}

// Save creates the LoginLog in the database.
func (llc *LoginLogCreate) Save(ctx context.Context) (*LoginLog, error) {
	llc.defaults()
	return withHooks[*LoginLog, LoginLogMutation](ctx, llc.sqlSave, llc.mutation, llc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (llc *LoginLogCreate) SaveX(ctx context.Context) *LoginLog {
	v, err := llc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (llc *LoginLogCreate) Exec(ctx context.Context) error {
	_, err := llc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (llc *LoginLogCreate) ExecX(ctx context.Context) {
	if err := llc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (llc *LoginLogCreate) defaults() {
	if _, ok := llc.mutation.LoginTime(); !ok {
		v := loginlog.DefaultLoginTime()
		llc.mutation.SetLoginTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (llc *LoginLogCreate) check() error {
	if _, ok := llc.mutation.IPAddr(); !ok {
		return &ValidationError{Name: "ip_addr", err: errors.New(`model: missing required field "LoginLog.ip_addr"`)}
	}
	if _, ok := llc.mutation.LoginTime(); !ok {
		return &ValidationError{Name: "login_time", err: errors.New(`model: missing required field "LoginLog.login_time"`)}
	}
	if v, ok := llc.mutation.ID(); ok {
		if err := loginlog.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`model: validator failed for field "LoginLog.id": %w`, err)}
		}
	}
	return nil
}

func (llc *LoginLogCreate) sqlSave(ctx context.Context) (*LoginLog, error) {
	if err := llc.check(); err != nil {
		return nil, err
	}
	_node, _spec := llc.createSpec()
	if err := sqlgraph.CreateNode(ctx, llc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	llc.mutation.id = &_node.ID
	llc.mutation.done = true
	return _node, nil
}

func (llc *LoginLogCreate) createSpec() (*LoginLog, *sqlgraph.CreateSpec) {
	var (
		_node = &LoginLog{config: llc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: loginlog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: loginlog.FieldID,
			},
		}
	)
	if id, ok := llc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := llc.mutation.IPAddr(); ok {
		_spec.SetField(loginlog.FieldIPAddr, field.TypeString, value)
		_node.IPAddr = value
	}
	if value, ok := llc.mutation.LoginTime(); ok {
		_spec.SetField(loginlog.FieldLoginTime, field.TypeTime, value)
		_node.LoginTime = value
	}
	if nodes := llc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginlog.UserTable,
			Columns: []string{loginlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_login_logs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LoginLogCreateBulk is the builder for creating many LoginLog entities in bulk.
type LoginLogCreateBulk struct {
	config
	builders []*LoginLogCreate
}

// Save creates the LoginLog entities in the database.
func (llcb *LoginLogCreateBulk) Save(ctx context.Context) ([]*LoginLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(llcb.builders))
	nodes := make([]*LoginLog, len(llcb.builders))
	mutators := make([]Mutator, len(llcb.builders))
	for i := range llcb.builders {
		func(i int, root context.Context) {
			builder := llcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LoginLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, llcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, llcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, llcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (llcb *LoginLogCreateBulk) SaveX(ctx context.Context) []*LoginLog {
	v, err := llcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (llcb *LoginLogCreateBulk) Exec(ctx context.Context) error {
	_, err := llcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (llcb *LoginLogCreateBulk) ExecX(ctx context.Context) {
	if err := llcb.Exec(ctx); err != nil {
		panic(err)
	}
}
