// Code generated by ent, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/grin-ch/grin-auth/pkg/model/loginlog"
	"github.com/grin-ch/grin-auth/pkg/model/predicate"
	"github.com/grin-ch/grin-auth/pkg/model/user"
)

// LoginLogUpdate is the builder for updating LoginLog entities.
type LoginLogUpdate struct {
	config
	hooks    []Hook
	mutation *LoginLogMutation
}

// Where appends a list predicates to the LoginLogUpdate builder.
func (llu *LoginLogUpdate) Where(ps ...predicate.LoginLog) *LoginLogUpdate {
	llu.mutation.Where(ps...)
	return llu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (llu *LoginLogUpdate) SetUserID(id int) *LoginLogUpdate {
	llu.mutation.SetUserID(id)
	return llu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (llu *LoginLogUpdate) SetNillableUserID(id *int) *LoginLogUpdate {
	if id != nil {
		llu = llu.SetUserID(*id)
	}
	return llu
}

// SetUser sets the "user" edge to the User entity.
func (llu *LoginLogUpdate) SetUser(u *User) *LoginLogUpdate {
	return llu.SetUserID(u.ID)
}

// Mutation returns the LoginLogMutation object of the builder.
func (llu *LoginLogUpdate) Mutation() *LoginLogMutation {
	return llu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (llu *LoginLogUpdate) ClearUser() *LoginLogUpdate {
	llu.mutation.ClearUser()
	return llu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (llu *LoginLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, LoginLogMutation](ctx, llu.sqlSave, llu.mutation, llu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (llu *LoginLogUpdate) SaveX(ctx context.Context) int {
	affected, err := llu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (llu *LoginLogUpdate) Exec(ctx context.Context) error {
	_, err := llu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (llu *LoginLogUpdate) ExecX(ctx context.Context) {
	if err := llu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (llu *LoginLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   loginlog.Table,
			Columns: loginlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: loginlog.FieldID,
			},
		},
	}
	if ps := llu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if llu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginlog.UserTable,
			Columns: []string{loginlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := llu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginlog.UserTable,
			Columns: []string{loginlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, llu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loginlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	llu.mutation.done = true
	return n, nil
}

// LoginLogUpdateOne is the builder for updating a single LoginLog entity.
type LoginLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LoginLogMutation
}

// SetUserID sets the "user" edge to the User entity by ID.
func (lluo *LoginLogUpdateOne) SetUserID(id int) *LoginLogUpdateOne {
	lluo.mutation.SetUserID(id)
	return lluo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (lluo *LoginLogUpdateOne) SetNillableUserID(id *int) *LoginLogUpdateOne {
	if id != nil {
		lluo = lluo.SetUserID(*id)
	}
	return lluo
}

// SetUser sets the "user" edge to the User entity.
func (lluo *LoginLogUpdateOne) SetUser(u *User) *LoginLogUpdateOne {
	return lluo.SetUserID(u.ID)
}

// Mutation returns the LoginLogMutation object of the builder.
func (lluo *LoginLogUpdateOne) Mutation() *LoginLogMutation {
	return lluo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (lluo *LoginLogUpdateOne) ClearUser() *LoginLogUpdateOne {
	lluo.mutation.ClearUser()
	return lluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lluo *LoginLogUpdateOne) Select(field string, fields ...string) *LoginLogUpdateOne {
	lluo.fields = append([]string{field}, fields...)
	return lluo
}

// Save executes the query and returns the updated LoginLog entity.
func (lluo *LoginLogUpdateOne) Save(ctx context.Context) (*LoginLog, error) {
	return withHooks[*LoginLog, LoginLogMutation](ctx, lluo.sqlSave, lluo.mutation, lluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lluo *LoginLogUpdateOne) SaveX(ctx context.Context) *LoginLog {
	node, err := lluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lluo *LoginLogUpdateOne) Exec(ctx context.Context) error {
	_, err := lluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lluo *LoginLogUpdateOne) ExecX(ctx context.Context) {
	if err := lluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lluo *LoginLogUpdateOne) sqlSave(ctx context.Context) (_node *LoginLog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   loginlog.Table,
			Columns: loginlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: loginlog.FieldID,
			},
		},
	}
	id, ok := lluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model: missing "LoginLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, loginlog.FieldID)
		for _, f := range fields {
			if !loginlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != loginlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if lluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginlog.UserTable,
			Columns: []string{loginlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginlog.UserTable,
			Columns: []string{loginlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LoginLog{config: lluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loginlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lluo.mutation.done = true
	return _node, nil
}
