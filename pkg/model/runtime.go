// Code generated by ent, DO NOT EDIT.

package model

import (
	"time"

	"github.com/grin-ch/grin-auth/pkg/model/loginlog"
	"github.com/grin-ch/grin-auth/pkg/model/schema"
	"github.com/grin-ch/grin-auth/pkg/model/user"
	"github.com/grin-ch/grin-auth/pkg/model/userdata"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	loginlogFields := schema.LoginLog{}.Fields()
	_ = loginlogFields
	// loginlogDescLoginTime is the schema descriptor for login_time field.
	loginlogDescLoginTime := loginlogFields[2].Descriptor()
	// loginlog.DefaultLoginTime holds the default value on creation for the login_time field.
	loginlog.DefaultLoginTime = loginlogDescLoginTime.Default.(func() time.Time)
	// loginlogDescID is the schema descriptor for id field.
	loginlogDescID := loginlogFields[0].Descriptor()
	// loginlog.IDValidator is a validator for the "id" field. It is called by the builders before save.
	loginlog.IDValidator = loginlogDescID.Validators[0].(func(int) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[3].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescRegTime is the schema descriptor for reg_time field.
	userDescRegTime := userFields[4].Descriptor()
	// user.DefaultRegTime holds the default value on creation for the reg_time field.
	user.DefaultRegTime = userDescRegTime.Default.(func() time.Time)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.IDValidator is a validator for the "id" field. It is called by the builders before save.
	user.IDValidator = userDescID.Validators[0].(func(int) error)
	userdataFields := schema.UserData{}.Fields()
	_ = userdataFields
	// userdataDescNickname is the schema descriptor for nickname field.
	userdataDescNickname := userdataFields[1].Descriptor()
	// userdata.NicknameValidator is a validator for the "nickname" field. It is called by the builders before save.
	userdata.NicknameValidator = userdataDescNickname.Validators[0].(func(string) error)
	// userdataDescAvatarURL is the schema descriptor for avatar_url field.
	userdataDescAvatarURL := userdataFields[2].Descriptor()
	// userdata.DefaultAvatarURL holds the default value on creation for the avatar_url field.
	userdata.DefaultAvatarURL = userdataDescAvatarURL.Default.(string)
	// userdataDescBirthday is the schema descriptor for birthday field.
	userdataDescBirthday := userdataFields[3].Descriptor()
	// userdata.DefaultBirthday holds the default value on creation for the birthday field.
	userdata.DefaultBirthday = userdataDescBirthday.Default.(func() time.Time)
	// userdataDescLevelExp is the schema descriptor for level_exp field.
	userdataDescLevelExp := userdataFields[5].Descriptor()
	// userdata.DefaultLevelExp holds the default value on creation for the level_exp field.
	userdata.DefaultLevelExp = userdataDescLevelExp.Default.(int)
	// userdataDescID is the schema descriptor for id field.
	userdataDescID := userdataFields[0].Descriptor()
	// userdata.IDValidator is a validator for the "id" field. It is called by the builders before save.
	userdata.IDValidator = userdataDescID.Validators[0].(func(int) error)
}
