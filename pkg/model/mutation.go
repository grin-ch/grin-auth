// Code generated by ent, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/grin-ch/grin-auth/pkg/model/loginlog"
	"github.com/grin-ch/grin-auth/pkg/model/predicate"
	"github.com/grin-ch/grin-auth/pkg/model/user"
	"github.com/grin-ch/grin-auth/pkg/model/userdata"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeLoginLog = "LoginLog"
	TypeUser     = "User"
	TypeUserData = "UserData"
)

// LoginLogMutation represents an operation that mutates the LoginLog nodes in the graph.
type LoginLogMutation struct {
	config
	op            Op
	typ           string
	id            *int
	ip_addr       *string
	login_time    *time.Time
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*LoginLog, error)
	predicates    []predicate.LoginLog
}

var _ ent.Mutation = (*LoginLogMutation)(nil)

// loginlogOption allows management of the mutation configuration using functional options.
type loginlogOption func(*LoginLogMutation)

// newLoginLogMutation creates new mutation for the LoginLog entity.
func newLoginLogMutation(c config, op Op, opts ...loginlogOption) *LoginLogMutation {
	m := &LoginLogMutation{
		config:        c,
		op:            op,
		typ:           TypeLoginLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLoginLogID sets the ID field of the mutation.
func withLoginLogID(id int) loginlogOption {
	return func(m *LoginLogMutation) {
		var (
			err   error
			once  sync.Once
			value *LoginLog
		)
		m.oldValue = func(ctx context.Context) (*LoginLog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LoginLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLoginLog sets the old LoginLog of the mutation.
func withLoginLog(node *LoginLog) loginlogOption {
	return func(m *LoginLogMutation) {
		m.oldValue = func(context.Context) (*LoginLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LoginLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LoginLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of LoginLog entities.
func (m *LoginLogMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LoginLogMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LoginLogMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LoginLog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIPAddr sets the "ip_addr" field.
func (m *LoginLogMutation) SetIPAddr(s string) {
	m.ip_addr = &s
}

// IPAddr returns the value of the "ip_addr" field in the mutation.
func (m *LoginLogMutation) IPAddr() (r string, exists bool) {
	v := m.ip_addr
	if v == nil {
		return
	}
	return *v, true
}

// OldIPAddr returns the old "ip_addr" field's value of the LoginLog entity.
// If the LoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoginLogMutation) OldIPAddr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIPAddr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIPAddr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIPAddr: %w", err)
	}
	return oldValue.IPAddr, nil
}

// ResetIPAddr resets all changes to the "ip_addr" field.
func (m *LoginLogMutation) ResetIPAddr() {
	m.ip_addr = nil
}

// SetLoginTime sets the "login_time" field.
func (m *LoginLogMutation) SetLoginTime(t time.Time) {
	m.login_time = &t
}

// LoginTime returns the value of the "login_time" field in the mutation.
func (m *LoginLogMutation) LoginTime() (r time.Time, exists bool) {
	v := m.login_time
	if v == nil {
		return
	}
	return *v, true
}

// OldLoginTime returns the old "login_time" field's value of the LoginLog entity.
// If the LoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoginLogMutation) OldLoginTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLoginTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLoginTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLoginTime: %w", err)
	}
	return oldValue.LoginTime, nil
}

// ResetLoginTime resets all changes to the "login_time" field.
func (m *LoginLogMutation) ResetLoginTime() {
	m.login_time = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *LoginLogMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *LoginLogMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *LoginLogMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *LoginLogMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *LoginLogMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *LoginLogMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the LoginLogMutation builder.
func (m *LoginLogMutation) Where(ps ...predicate.LoginLog) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LoginLogMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LoginLogMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.LoginLog, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LoginLogMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LoginLogMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (LoginLog).
func (m *LoginLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LoginLogMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.ip_addr != nil {
		fields = append(fields, loginlog.FieldIPAddr)
	}
	if m.login_time != nil {
		fields = append(fields, loginlog.FieldLoginTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LoginLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case loginlog.FieldIPAddr:
		return m.IPAddr()
	case loginlog.FieldLoginTime:
		return m.LoginTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LoginLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case loginlog.FieldIPAddr:
		return m.OldIPAddr(ctx)
	case loginlog.FieldLoginTime:
		return m.OldLoginTime(ctx)
	}
	return nil, fmt.Errorf("unknown LoginLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LoginLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case loginlog.FieldIPAddr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIPAddr(v)
		return nil
	case loginlog.FieldLoginTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLoginTime(v)
		return nil
	}
	return fmt.Errorf("unknown LoginLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LoginLogMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LoginLogMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LoginLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown LoginLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LoginLogMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LoginLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LoginLogMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LoginLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LoginLogMutation) ResetField(name string) error {
	switch name {
	case loginlog.FieldIPAddr:
		m.ResetIPAddr()
		return nil
	case loginlog.FieldLoginTime:
		m.ResetLoginTime()
		return nil
	}
	return fmt.Errorf("unknown LoginLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LoginLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, loginlog.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LoginLogMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case loginlog.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LoginLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LoginLogMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LoginLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, loginlog.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LoginLogMutation) EdgeCleared(name string) bool {
	switch name {
	case loginlog.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LoginLogMutation) ClearEdge(name string) error {
	switch name {
	case loginlog.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown LoginLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LoginLogMutation) ResetEdge(name string) error {
	switch name {
	case loginlog.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown LoginLog edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                Op
	typ               string
	id                *int
	email             *string
	phone             *string
	password          *string
	reg_time          *time.Time
	clearedFields     map[string]struct{}
	user_data         *int
	cleareduser_data  bool
	login_logs        map[int]struct{}
	removedlogin_logs map[int]struct{}
	clearedlogin_logs bool
	done              bool
	oldValue          func(context.Context) (*User, error)
	predicates        []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPhone sets the "phone" field.
func (m *UserMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *UserMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *UserMutation) ResetPhone() {
	m.phone = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetRegTime sets the "reg_time" field.
func (m *UserMutation) SetRegTime(t time.Time) {
	m.reg_time = &t
}

// RegTime returns the value of the "reg_time" field in the mutation.
func (m *UserMutation) RegTime() (r time.Time, exists bool) {
	v := m.reg_time
	if v == nil {
		return
	}
	return *v, true
}

// OldRegTime returns the old "reg_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRegTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRegTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRegTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegTime: %w", err)
	}
	return oldValue.RegTime, nil
}

// ResetRegTime resets all changes to the "reg_time" field.
func (m *UserMutation) ResetRegTime() {
	m.reg_time = nil
}

// SetUserDataID sets the "user_data" edge to the UserData entity by id.
func (m *UserMutation) SetUserDataID(id int) {
	m.user_data = &id
}

// ClearUserData clears the "user_data" edge to the UserData entity.
func (m *UserMutation) ClearUserData() {
	m.cleareduser_data = true
}

// UserDataCleared reports if the "user_data" edge to the UserData entity was cleared.
func (m *UserMutation) UserDataCleared() bool {
	return m.cleareduser_data
}

// UserDataID returns the "user_data" edge ID in the mutation.
func (m *UserMutation) UserDataID() (id int, exists bool) {
	if m.user_data != nil {
		return *m.user_data, true
	}
	return
}

// UserDataIDs returns the "user_data" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserDataID instead. It exists only for internal usage by the builders.
func (m *UserMutation) UserDataIDs() (ids []int) {
	if id := m.user_data; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUserData resets all changes to the "user_data" edge.
func (m *UserMutation) ResetUserData() {
	m.user_data = nil
	m.cleareduser_data = false
}

// AddLoginLogIDs adds the "login_logs" edge to the LoginLog entity by ids.
func (m *UserMutation) AddLoginLogIDs(ids ...int) {
	if m.login_logs == nil {
		m.login_logs = make(map[int]struct{})
	}
	for i := range ids {
		m.login_logs[ids[i]] = struct{}{}
	}
}

// ClearLoginLogs clears the "login_logs" edge to the LoginLog entity.
func (m *UserMutation) ClearLoginLogs() {
	m.clearedlogin_logs = true
}

// LoginLogsCleared reports if the "login_logs" edge to the LoginLog entity was cleared.
func (m *UserMutation) LoginLogsCleared() bool {
	return m.clearedlogin_logs
}

// RemoveLoginLogIDs removes the "login_logs" edge to the LoginLog entity by IDs.
func (m *UserMutation) RemoveLoginLogIDs(ids ...int) {
	if m.removedlogin_logs == nil {
		m.removedlogin_logs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.login_logs, ids[i])
		m.removedlogin_logs[ids[i]] = struct{}{}
	}
}

// RemovedLoginLogs returns the removed IDs of the "login_logs" edge to the LoginLog entity.
func (m *UserMutation) RemovedLoginLogsIDs() (ids []int) {
	for id := range m.removedlogin_logs {
		ids = append(ids, id)
	}
	return
}

// LoginLogsIDs returns the "login_logs" edge IDs in the mutation.
func (m *UserMutation) LoginLogsIDs() (ids []int) {
	for id := range m.login_logs {
		ids = append(ids, id)
	}
	return
}

// ResetLoginLogs resets all changes to the "login_logs" edge.
func (m *UserMutation) ResetLoginLogs() {
	m.login_logs = nil
	m.clearedlogin_logs = false
	m.removedlogin_logs = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.phone != nil {
		fields = append(fields, user.FieldPhone)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.reg_time != nil {
		fields = append(fields, user.FieldRegTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldEmail:
		return m.Email()
	case user.FieldPhone:
		return m.Phone()
	case user.FieldPassword:
		return m.Password()
	case user.FieldRegTime:
		return m.RegTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPhone:
		return m.OldPhone(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldRegTime:
		return m.OldRegTime(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldRegTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegTime(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPhone:
		m.ResetPhone()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldRegTime:
		m.ResetRegTime()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user_data != nil {
		edges = append(edges, user.EdgeUserData)
	}
	if m.login_logs != nil {
		edges = append(edges, user.EdgeLoginLogs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserData:
		if id := m.user_data; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeLoginLogs:
		ids := make([]ent.Value, 0, len(m.login_logs))
		for id := range m.login_logs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedlogin_logs != nil {
		edges = append(edges, user.EdgeLoginLogs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeLoginLogs:
		ids := make([]ent.Value, 0, len(m.removedlogin_logs))
		for id := range m.removedlogin_logs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser_data {
		edges = append(edges, user.EdgeUserData)
	}
	if m.clearedlogin_logs {
		edges = append(edges, user.EdgeLoginLogs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeUserData:
		return m.cleareduser_data
	case user.EdgeLoginLogs:
		return m.clearedlogin_logs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeUserData:
		m.ClearUserData()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeUserData:
		m.ResetUserData()
		return nil
	case user.EdgeLoginLogs:
		m.ResetLoginLogs()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserDataMutation represents an operation that mutates the UserData nodes in the graph.
type UserDataMutation struct {
	config
	op            Op
	typ           string
	id            *int
	nickname      *string
	avatar_url    *string
	birthday      *time.Time
	sex           *userdata.Sex
	level_exp     *int
	addlevel_exp  *int
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*UserData, error)
	predicates    []predicate.UserData
}

var _ ent.Mutation = (*UserDataMutation)(nil)

// userdataOption allows management of the mutation configuration using functional options.
type userdataOption func(*UserDataMutation)

// newUserDataMutation creates new mutation for the UserData entity.
func newUserDataMutation(c config, op Op, opts ...userdataOption) *UserDataMutation {
	m := &UserDataMutation{
		config:        c,
		op:            op,
		typ:           TypeUserData,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserDataID sets the ID field of the mutation.
func withUserDataID(id int) userdataOption {
	return func(m *UserDataMutation) {
		var (
			err   error
			once  sync.Once
			value *UserData
		)
		m.oldValue = func(ctx context.Context) (*UserData, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserData.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserData sets the old UserData of the mutation.
func withUserData(node *UserData) userdataOption {
	return func(m *UserDataMutation) {
		m.oldValue = func(context.Context) (*UserData, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserDataMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserDataMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserData entities.
func (m *UserDataMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserDataMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserDataMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserData.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNickname sets the "nickname" field.
func (m *UserDataMutation) SetNickname(s string) {
	m.nickname = &s
}

// Nickname returns the value of the "nickname" field in the mutation.
func (m *UserDataMutation) Nickname() (r string, exists bool) {
	v := m.nickname
	if v == nil {
		return
	}
	return *v, true
}

// OldNickname returns the old "nickname" field's value of the UserData entity.
// If the UserData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDataMutation) OldNickname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNickname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNickname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickname: %w", err)
	}
	return oldValue.Nickname, nil
}

// ResetNickname resets all changes to the "nickname" field.
func (m *UserDataMutation) ResetNickname() {
	m.nickname = nil
}

// SetAvatarURL sets the "avatar_url" field.
func (m *UserDataMutation) SetAvatarURL(s string) {
	m.avatar_url = &s
}

// AvatarURL returns the value of the "avatar_url" field in the mutation.
func (m *UserDataMutation) AvatarURL() (r string, exists bool) {
	v := m.avatar_url
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatarURL returns the old "avatar_url" field's value of the UserData entity.
// If the UserData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDataMutation) OldAvatarURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatarURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatarURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatarURL: %w", err)
	}
	return oldValue.AvatarURL, nil
}

// ResetAvatarURL resets all changes to the "avatar_url" field.
func (m *UserDataMutation) ResetAvatarURL() {
	m.avatar_url = nil
}

// SetBirthday sets the "birthday" field.
func (m *UserDataMutation) SetBirthday(t time.Time) {
	m.birthday = &t
}

// Birthday returns the value of the "birthday" field in the mutation.
func (m *UserDataMutation) Birthday() (r time.Time, exists bool) {
	v := m.birthday
	if v == nil {
		return
	}
	return *v, true
}

// OldBirthday returns the old "birthday" field's value of the UserData entity.
// If the UserData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDataMutation) OldBirthday(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBirthday is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBirthday requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirthday: %w", err)
	}
	return oldValue.Birthday, nil
}

// ResetBirthday resets all changes to the "birthday" field.
func (m *UserDataMutation) ResetBirthday() {
	m.birthday = nil
}

// SetSex sets the "sex" field.
func (m *UserDataMutation) SetSex(u userdata.Sex) {
	m.sex = &u
}

// Sex returns the value of the "sex" field in the mutation.
func (m *UserDataMutation) Sex() (r userdata.Sex, exists bool) {
	v := m.sex
	if v == nil {
		return
	}
	return *v, true
}

// OldSex returns the old "sex" field's value of the UserData entity.
// If the UserData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDataMutation) OldSex(ctx context.Context) (v userdata.Sex, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSex: %w", err)
	}
	return oldValue.Sex, nil
}

// ResetSex resets all changes to the "sex" field.
func (m *UserDataMutation) ResetSex() {
	m.sex = nil
}

// SetLevelExp sets the "level_exp" field.
func (m *UserDataMutation) SetLevelExp(i int) {
	m.level_exp = &i
	m.addlevel_exp = nil
}

// LevelExp returns the value of the "level_exp" field in the mutation.
func (m *UserDataMutation) LevelExp() (r int, exists bool) {
	v := m.level_exp
	if v == nil {
		return
	}
	return *v, true
}

// OldLevelExp returns the old "level_exp" field's value of the UserData entity.
// If the UserData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDataMutation) OldLevelExp(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLevelExp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLevelExp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLevelExp: %w", err)
	}
	return oldValue.LevelExp, nil
}

// AddLevelExp adds i to the "level_exp" field.
func (m *UserDataMutation) AddLevelExp(i int) {
	if m.addlevel_exp != nil {
		*m.addlevel_exp += i
	} else {
		m.addlevel_exp = &i
	}
}

// AddedLevelExp returns the value that was added to the "level_exp" field in this mutation.
func (m *UserDataMutation) AddedLevelExp() (r int, exists bool) {
	v := m.addlevel_exp
	if v == nil {
		return
	}
	return *v, true
}

// ResetLevelExp resets all changes to the "level_exp" field.
func (m *UserDataMutation) ResetLevelExp() {
	m.level_exp = nil
	m.addlevel_exp = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *UserDataMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *UserDataMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *UserDataMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *UserDataMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *UserDataMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *UserDataMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the UserDataMutation builder.
func (m *UserDataMutation) Where(ps ...predicate.UserData) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserDataMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserDataMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserData, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserDataMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserDataMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserData).
func (m *UserDataMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserDataMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.nickname != nil {
		fields = append(fields, userdata.FieldNickname)
	}
	if m.avatar_url != nil {
		fields = append(fields, userdata.FieldAvatarURL)
	}
	if m.birthday != nil {
		fields = append(fields, userdata.FieldBirthday)
	}
	if m.sex != nil {
		fields = append(fields, userdata.FieldSex)
	}
	if m.level_exp != nil {
		fields = append(fields, userdata.FieldLevelExp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserDataMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userdata.FieldNickname:
		return m.Nickname()
	case userdata.FieldAvatarURL:
		return m.AvatarURL()
	case userdata.FieldBirthday:
		return m.Birthday()
	case userdata.FieldSex:
		return m.Sex()
	case userdata.FieldLevelExp:
		return m.LevelExp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserDataMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userdata.FieldNickname:
		return m.OldNickname(ctx)
	case userdata.FieldAvatarURL:
		return m.OldAvatarURL(ctx)
	case userdata.FieldBirthday:
		return m.OldBirthday(ctx)
	case userdata.FieldSex:
		return m.OldSex(ctx)
	case userdata.FieldLevelExp:
		return m.OldLevelExp(ctx)
	}
	return nil, fmt.Errorf("unknown UserData field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserDataMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userdata.FieldNickname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickname(v)
		return nil
	case userdata.FieldAvatarURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatarURL(v)
		return nil
	case userdata.FieldBirthday:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirthday(v)
		return nil
	case userdata.FieldSex:
		v, ok := value.(userdata.Sex)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSex(v)
		return nil
	case userdata.FieldLevelExp:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLevelExp(v)
		return nil
	}
	return fmt.Errorf("unknown UserData field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserDataMutation) AddedFields() []string {
	var fields []string
	if m.addlevel_exp != nil {
		fields = append(fields, userdata.FieldLevelExp)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserDataMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userdata.FieldLevelExp:
		return m.AddedLevelExp()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserDataMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userdata.FieldLevelExp:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLevelExp(v)
		return nil
	}
	return fmt.Errorf("unknown UserData numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserDataMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserDataMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserDataMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserData nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserDataMutation) ResetField(name string) error {
	switch name {
	case userdata.FieldNickname:
		m.ResetNickname()
		return nil
	case userdata.FieldAvatarURL:
		m.ResetAvatarURL()
		return nil
	case userdata.FieldBirthday:
		m.ResetBirthday()
		return nil
	case userdata.FieldSex:
		m.ResetSex()
		return nil
	case userdata.FieldLevelExp:
		m.ResetLevelExp()
		return nil
	}
	return fmt.Errorf("unknown UserData field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserDataMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, userdata.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserDataMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case userdata.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserDataMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserDataMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserDataMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, userdata.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserDataMutation) EdgeCleared(name string) bool {
	switch name {
	case userdata.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserDataMutation) ClearEdge(name string) error {
	switch name {
	case userdata.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown UserData unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserDataMutation) ResetEdge(name string) error {
	switch name {
	case userdata.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown UserData edge %s", name)
}
