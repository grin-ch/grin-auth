// Code generated by ent, DO NOT EDIT.

package model

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/grin-ch/grin-auth/pkg/model/user"
	"github.com/grin-ch/grin-auth/pkg/model/userdata"
)

// UserData is the model entity for the UserData schema.
type UserData struct {
	config `json:"-"`
	// ID of the ent.
	// 自增主键
	ID int `json:"id,omitempty"`
	// 昵称
	Nickname string `json:"nickname,omitempty"`
	// 头像地址
	AvatarURL string `json:"avatar_url,omitempty"`
	// 生日
	Birthday time.Time `json:"birthday,omitempty"`
	// 性别
	Sex userdata.Sex `json:"sex,omitempty"`
	// 等级经验
	LevelExp int `json:"level_exp,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserDataQuery when eager-loading is set.
	Edges          UserDataEdges `json:"edges"`
	user_user_data *int
}

// UserDataEdges holds the relations/edges for other nodes in the graph.
type UserDataEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserDataEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userdata.FieldID, userdata.FieldLevelExp:
			values[i] = new(sql.NullInt64)
		case userdata.FieldNickname, userdata.FieldAvatarURL, userdata.FieldSex:
			values[i] = new(sql.NullString)
		case userdata.FieldBirthday:
			values[i] = new(sql.NullTime)
		case userdata.ForeignKeys[0]: // user_user_data
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserData", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserData fields.
func (ud *UserData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userdata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ud.ID = int(value.Int64)
		case userdata.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				ud.Nickname = value.String
			}
		case userdata.FieldAvatarURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_url", values[i])
			} else if value.Valid {
				ud.AvatarURL = value.String
			}
		case userdata.FieldBirthday:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birthday", values[i])
			} else if value.Valid {
				ud.Birthday = value.Time
			}
		case userdata.FieldSex:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sex", values[i])
			} else if value.Valid {
				ud.Sex = userdata.Sex(value.String)
			}
		case userdata.FieldLevelExp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level_exp", values[i])
			} else if value.Valid {
				ud.LevelExp = int(value.Int64)
			}
		case userdata.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_user_data", value)
			} else if value.Valid {
				ud.user_user_data = new(int)
				*ud.user_user_data = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the UserData entity.
func (ud *UserData) QueryUser() *UserQuery {
	return NewUserDataClient(ud.config).QueryUser(ud)
}

// Update returns a builder for updating this UserData.
// Note that you need to call UserData.Unwrap() before calling this method if this UserData
// was returned from a transaction, and the transaction was committed or rolled back.
func (ud *UserData) Update() *UserDataUpdateOne {
	return NewUserDataClient(ud.config).UpdateOne(ud)
}

// Unwrap unwraps the UserData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ud *UserData) Unwrap() *UserData {
	_tx, ok := ud.config.driver.(*txDriver)
	if !ok {
		panic("model: UserData is not a transactional entity")
	}
	ud.config.driver = _tx.drv
	return ud
}

// String implements the fmt.Stringer.
func (ud *UserData) String() string {
	var builder strings.Builder
	builder.WriteString("UserData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ud.ID))
	builder.WriteString("nickname=")
	builder.WriteString(ud.Nickname)
	builder.WriteString(", ")
	builder.WriteString("avatar_url=")
	builder.WriteString(ud.AvatarURL)
	builder.WriteString(", ")
	builder.WriteString("birthday=")
	builder.WriteString(ud.Birthday.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sex=")
	builder.WriteString(fmt.Sprintf("%v", ud.Sex))
	builder.WriteString(", ")
	builder.WriteString("level_exp=")
	builder.WriteString(fmt.Sprintf("%v", ud.LevelExp))
	builder.WriteByte(')')
	return builder.String()
}

// UserDataSlice is a parsable slice of UserData.
type UserDataSlice []*UserData

func (ud UserDataSlice) config(cfg config) {
	for _i := range ud {
		ud[_i].config = cfg
	}
}
