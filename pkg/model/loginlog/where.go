// Code generated by ent, DO NOT EDIT.

package loginlog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/grin-ch/grin-auth/pkg/model/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLTE(FieldID, id))
}

// IPAddr applies equality check predicate on the "ip_addr" field. It's identical to IPAddrEQ.
func IPAddr(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldIPAddr, v))
}

// LoginTime applies equality check predicate on the "login_time" field. It's identical to LoginTimeEQ.
func LoginTime(v time.Time) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldLoginTime, v))
}

// IPAddrEQ applies the EQ predicate on the "ip_addr" field.
func IPAddrEQ(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldIPAddr, v))
}

// IPAddrNEQ applies the NEQ predicate on the "ip_addr" field.
func IPAddrNEQ(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNEQ(FieldIPAddr, v))
}

// IPAddrIn applies the In predicate on the "ip_addr" field.
func IPAddrIn(vs ...string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldIn(FieldIPAddr, vs...))
}

// IPAddrNotIn applies the NotIn predicate on the "ip_addr" field.
func IPAddrNotIn(vs ...string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNotIn(FieldIPAddr, vs...))
}

// IPAddrGT applies the GT predicate on the "ip_addr" field.
func IPAddrGT(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGT(FieldIPAddr, v))
}

// IPAddrGTE applies the GTE predicate on the "ip_addr" field.
func IPAddrGTE(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGTE(FieldIPAddr, v))
}

// IPAddrLT applies the LT predicate on the "ip_addr" field.
func IPAddrLT(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLT(FieldIPAddr, v))
}

// IPAddrLTE applies the LTE predicate on the "ip_addr" field.
func IPAddrLTE(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLTE(FieldIPAddr, v))
}

// IPAddrContains applies the Contains predicate on the "ip_addr" field.
func IPAddrContains(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldContains(FieldIPAddr, v))
}

// IPAddrHasPrefix applies the HasPrefix predicate on the "ip_addr" field.
func IPAddrHasPrefix(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldHasPrefix(FieldIPAddr, v))
}

// IPAddrHasSuffix applies the HasSuffix predicate on the "ip_addr" field.
func IPAddrHasSuffix(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldHasSuffix(FieldIPAddr, v))
}

// IPAddrEqualFold applies the EqualFold predicate on the "ip_addr" field.
func IPAddrEqualFold(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEqualFold(FieldIPAddr, v))
}

// IPAddrContainsFold applies the ContainsFold predicate on the "ip_addr" field.
func IPAddrContainsFold(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldContainsFold(FieldIPAddr, v))
}

// LoginTimeEQ applies the EQ predicate on the "login_time" field.
func LoginTimeEQ(v time.Time) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldLoginTime, v))
}

// LoginTimeNEQ applies the NEQ predicate on the "login_time" field.
func LoginTimeNEQ(v time.Time) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNEQ(FieldLoginTime, v))
}

// LoginTimeIn applies the In predicate on the "login_time" field.
func LoginTimeIn(vs ...time.Time) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldIn(FieldLoginTime, vs...))
}

// LoginTimeNotIn applies the NotIn predicate on the "login_time" field.
func LoginTimeNotIn(vs ...time.Time) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNotIn(FieldLoginTime, vs...))
}

// LoginTimeGT applies the GT predicate on the "login_time" field.
func LoginTimeGT(v time.Time) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGT(FieldLoginTime, v))
}

// LoginTimeGTE applies the GTE predicate on the "login_time" field.
func LoginTimeGTE(v time.Time) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGTE(FieldLoginTime, v))
}

// LoginTimeLT applies the LT predicate on the "login_time" field.
func LoginTimeLT(v time.Time) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLT(FieldLoginTime, v))
}

// LoginTimeLTE applies the LTE predicate on the "login_time" field.
func LoginTimeLTE(v time.Time) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLTE(FieldLoginTime, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.LoginLog {
	return predicate.LoginLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.LoginLog {
	return predicate.LoginLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LoginLog) predicate.LoginLog {
	return predicate.LoginLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LoginLog) predicate.LoginLog {
	return predicate.LoginLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LoginLog) predicate.LoginLog {
	return predicate.LoginLog(func(s *sql.Selector) {
		p(s.Not())
	})
}
