// Code generated by ent, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/grin-ch/grin-auth/pkg/model/migrate"

	"github.com/grin-ch/grin-auth/pkg/model/loginlog"
	"github.com/grin-ch/grin-auth/pkg/model/user"
	"github.com/grin-ch/grin-auth/pkg/model/userdata"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// LoginLog is the client for interacting with the LoginLog builders.
	LoginLog *LoginLogClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserData is the client for interacting with the UserData builders.
	UserData *UserDataClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.LoginLog = NewLoginLogClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserData = NewUserDataClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("model: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("model: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		LoginLog: NewLoginLogClient(cfg),
		User:     NewUserClient(cfg),
		UserData: NewUserDataClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		LoginLog: NewLoginLogClient(cfg),
		User:     NewUserClient(cfg),
		UserData: NewUserDataClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		LoginLog.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.LoginLog.Use(hooks...)
	c.User.Use(hooks...)
	c.UserData.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.LoginLog.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
	c.UserData.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *LoginLogMutation:
		return c.LoginLog.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserDataMutation:
		return c.UserData.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("model: unknown mutation type %T", m)
	}
}

// LoginLogClient is a client for the LoginLog schema.
type LoginLogClient struct {
	config
}

// NewLoginLogClient returns a client for the LoginLog from the given config.
func NewLoginLogClient(c config) *LoginLogClient {
	return &LoginLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `loginlog.Hooks(f(g(h())))`.
func (c *LoginLogClient) Use(hooks ...Hook) {
	c.hooks.LoginLog = append(c.hooks.LoginLog, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `loginlog.Intercept(f(g(h())))`.
func (c *LoginLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.LoginLog = append(c.inters.LoginLog, interceptors...)
}

// Create returns a builder for creating a LoginLog entity.
func (c *LoginLogClient) Create() *LoginLogCreate {
	mutation := newLoginLogMutation(c.config, OpCreate)
	return &LoginLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LoginLog entities.
func (c *LoginLogClient) CreateBulk(builders ...*LoginLogCreate) *LoginLogCreateBulk {
	return &LoginLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LoginLog.
func (c *LoginLogClient) Update() *LoginLogUpdate {
	mutation := newLoginLogMutation(c.config, OpUpdate)
	return &LoginLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LoginLogClient) UpdateOne(ll *LoginLog) *LoginLogUpdateOne {
	mutation := newLoginLogMutation(c.config, OpUpdateOne, withLoginLog(ll))
	return &LoginLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LoginLogClient) UpdateOneID(id int) *LoginLogUpdateOne {
	mutation := newLoginLogMutation(c.config, OpUpdateOne, withLoginLogID(id))
	return &LoginLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LoginLog.
func (c *LoginLogClient) Delete() *LoginLogDelete {
	mutation := newLoginLogMutation(c.config, OpDelete)
	return &LoginLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LoginLogClient) DeleteOne(ll *LoginLog) *LoginLogDeleteOne {
	return c.DeleteOneID(ll.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LoginLogClient) DeleteOneID(id int) *LoginLogDeleteOne {
	builder := c.Delete().Where(loginlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LoginLogDeleteOne{builder}
}

// Query returns a query builder for LoginLog.
func (c *LoginLogClient) Query() *LoginLogQuery {
	return &LoginLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLoginLog},
		inters: c.Interceptors(),
	}
}

// Get returns a LoginLog entity by its id.
func (c *LoginLogClient) Get(ctx context.Context, id int) (*LoginLog, error) {
	return c.Query().Where(loginlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LoginLogClient) GetX(ctx context.Context, id int) *LoginLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a LoginLog.
func (c *LoginLogClient) QueryUser(ll *LoginLog) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ll.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(loginlog.Table, loginlog.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, loginlog.UserTable, loginlog.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ll.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LoginLogClient) Hooks() []Hook {
	return c.hooks.LoginLog
}

// Interceptors returns the client interceptors.
func (c *LoginLogClient) Interceptors() []Interceptor {
	return c.inters.LoginLog
}

func (c *LoginLogClient) mutate(ctx context.Context, m *LoginLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LoginLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LoginLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LoginLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LoginLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("model: unknown LoginLog mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserData queries the user_data edge of a User.
func (c *UserClient) QueryUserData(u *User) *UserDataQuery {
	query := (&UserDataClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userdata.Table, userdata.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.UserDataTable, user.UserDataColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLoginLogs queries the login_logs edge of a User.
func (c *UserClient) QueryLoginLogs(u *User) *LoginLogQuery {
	query := (&LoginLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(loginlog.Table, loginlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.LoginLogsTable, user.LoginLogsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("model: unknown User mutation op: %q", m.Op())
	}
}

// UserDataClient is a client for the UserData schema.
type UserDataClient struct {
	config
}

// NewUserDataClient returns a client for the UserData from the given config.
func NewUserDataClient(c config) *UserDataClient {
	return &UserDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userdata.Hooks(f(g(h())))`.
func (c *UserDataClient) Use(hooks ...Hook) {
	c.hooks.UserData = append(c.hooks.UserData, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userdata.Intercept(f(g(h())))`.
func (c *UserDataClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserData = append(c.inters.UserData, interceptors...)
}

// Create returns a builder for creating a UserData entity.
func (c *UserDataClient) Create() *UserDataCreate {
	mutation := newUserDataMutation(c.config, OpCreate)
	return &UserDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserData entities.
func (c *UserDataClient) CreateBulk(builders ...*UserDataCreate) *UserDataCreateBulk {
	return &UserDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserData.
func (c *UserDataClient) Update() *UserDataUpdate {
	mutation := newUserDataMutation(c.config, OpUpdate)
	return &UserDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserDataClient) UpdateOne(ud *UserData) *UserDataUpdateOne {
	mutation := newUserDataMutation(c.config, OpUpdateOne, withUserData(ud))
	return &UserDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserDataClient) UpdateOneID(id int) *UserDataUpdateOne {
	mutation := newUserDataMutation(c.config, OpUpdateOne, withUserDataID(id))
	return &UserDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserData.
func (c *UserDataClient) Delete() *UserDataDelete {
	mutation := newUserDataMutation(c.config, OpDelete)
	return &UserDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserDataClient) DeleteOne(ud *UserData) *UserDataDeleteOne {
	return c.DeleteOneID(ud.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserDataClient) DeleteOneID(id int) *UserDataDeleteOne {
	builder := c.Delete().Where(userdata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDataDeleteOne{builder}
}

// Query returns a query builder for UserData.
func (c *UserDataClient) Query() *UserDataQuery {
	return &UserDataQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserData},
		inters: c.Interceptors(),
	}
}

// Get returns a UserData entity by its id.
func (c *UserDataClient) Get(ctx context.Context, id int) (*UserData, error) {
	return c.Query().Where(userdata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserDataClient) GetX(ctx context.Context, id int) *UserData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserData.
func (c *UserDataClient) QueryUser(ud *UserData) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ud.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userdata.Table, userdata.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, userdata.UserTable, userdata.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ud.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserDataClient) Hooks() []Hook {
	return c.hooks.UserData
}

// Interceptors returns the client interceptors.
func (c *UserDataClient) Interceptors() []Interceptor {
	return c.inters.UserData
}

func (c *UserDataClient) mutate(ctx context.Context, m *UserDataMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserDataCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserDataUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDataDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("model: unknown UserData mutation op: %q", m.Op())
	}
}
