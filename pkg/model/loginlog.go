// Code generated by ent, DO NOT EDIT.

package model

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/grin-ch/grin-auth/pkg/model/loginlog"
	"github.com/grin-ch/grin-auth/pkg/model/user"
)

// LoginLog is the model entity for the LoginLog schema.
type LoginLog struct {
	config `json:"-"`
	// ID of the ent.
	// 自增主键
	ID int `json:"id,omitempty"`
	// 登入时的ip
	IPAddr string `json:"ip_addr,omitempty"`
	// 登入时间
	LoginTime time.Time `json:"login_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LoginLogQuery when eager-loading is set.
	Edges           LoginLogEdges `json:"edges"`
	user_login_logs *int
}

// LoginLogEdges holds the relations/edges for other nodes in the graph.
type LoginLogEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LoginLogEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LoginLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case loginlog.FieldID:
			values[i] = new(sql.NullInt64)
		case loginlog.FieldIPAddr:
			values[i] = new(sql.NullString)
		case loginlog.FieldLoginTime:
			values[i] = new(sql.NullTime)
		case loginlog.ForeignKeys[0]: // user_login_logs
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type LoginLog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LoginLog fields.
func (ll *LoginLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case loginlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ll.ID = int(value.Int64)
		case loginlog.FieldIPAddr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_addr", values[i])
			} else if value.Valid {
				ll.IPAddr = value.String
			}
		case loginlog.FieldLoginTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field login_time", values[i])
			} else if value.Valid {
				ll.LoginTime = value.Time
			}
		case loginlog.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_login_logs", value)
			} else if value.Valid {
				ll.user_login_logs = new(int)
				*ll.user_login_logs = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the LoginLog entity.
func (ll *LoginLog) QueryUser() *UserQuery {
	return NewLoginLogClient(ll.config).QueryUser(ll)
}

// Update returns a builder for updating this LoginLog.
// Note that you need to call LoginLog.Unwrap() before calling this method if this LoginLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (ll *LoginLog) Update() *LoginLogUpdateOne {
	return NewLoginLogClient(ll.config).UpdateOne(ll)
}

// Unwrap unwraps the LoginLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ll *LoginLog) Unwrap() *LoginLog {
	_tx, ok := ll.config.driver.(*txDriver)
	if !ok {
		panic("model: LoginLog is not a transactional entity")
	}
	ll.config.driver = _tx.drv
	return ll
}

// String implements the fmt.Stringer.
func (ll *LoginLog) String() string {
	var builder strings.Builder
	builder.WriteString("LoginLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ll.ID))
	builder.WriteString("ip_addr=")
	builder.WriteString(ll.IPAddr)
	builder.WriteString(", ")
	builder.WriteString("login_time=")
	builder.WriteString(ll.LoginTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// LoginLogs is a parsable slice of LoginLog.
type LoginLogs []*LoginLog

func (ll LoginLogs) config(cfg config) {
	for _i := range ll {
		ll[_i].config = cfg
	}
}
